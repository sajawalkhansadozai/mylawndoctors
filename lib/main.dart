// lib/main.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // generated by `flutterfire configure`

import 'theme.dart';
import 'widgets.dart';
import 'pages/home_page.dart';
import 'pages/services_page.dart';
import 'pages/plants_page.dart';
import 'pages/about_page.dart';
import 'pages/admin_panel_page.dart'; // <-- make sure this file exists

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(const LawnDoctorApp());
}

class LawnDoctorApp extends StatelessWidget {
  const LawnDoctorApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My Lawn Doctor - Premium Lawn Care Services',
      debugShowCheckedModeBanner: false,
      theme: buildTheme(),
      home: const LawnDoctorShell(),
    );
  }
}

class LawnDoctorShell extends StatefulWidget {
  const LawnDoctorShell({super.key});

  @override
  State<LawnDoctorShell> createState() => _LawnDoctorShellState();
}

class _LawnDoctorShellState extends State<LawnDoctorShell> {
  String _pageId = 'home';

  final _pages = const [
    ('home', 'Home'),
    ('services', 'Services'),
    ('plants', 'Plants'),
    ('about', 'About'),
  ];

  void _navigate(String id) {
    if (_pageId == id) return;
    setState(() => _pageId = id);
  }

  Widget _body() {
    switch (_pageId) {
      case 'home':
        return HomePage(onNavigate: _navigate);
      case 'services':
        return ServicesPage(onNavigate: _navigate);
      case 'plants':
        return PlantsPage(onNavigate: _navigate);
      case 'about':
        return AboutPage(onNavigate: _navigate);
      default:
        return HomePage(onNavigate: _navigate);
    }
  }

  @override
  Widget build(BuildContext context) {
    final isWide = MediaQuery.of(context).size.width >= 900;

    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        toolbarHeight: 72,
        backgroundColor: Colors.white.withOpacity(0.95),
        surfaceTintColor: Colors.transparent,
        titleSpacing: 0,
        title: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 20),
          child: Row(
            children: [
              // Tap the logo 5x within 3s to open admin (password protected)
              _LogoAdminGate(
                onUnlocked: () {
                  Navigator.of(context).push(
                    MaterialPageRoute(builder: (_) => const AdminPanelPage()),
                  );
                },
              ),
              const SizedBox(width: 12),
              GradientText(
                'My Lawn Doctor',
                gradient: kBrandGradient,
                style: const TextStyle(
                  fontSize: 26,
                  fontWeight: FontWeight.w800,
                  letterSpacing: 0.2,
                ),
              ),
              const Spacer(),
              if (isWide)
                Row(
                  children: _pages
                      .map(
                        (e) => Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 6),
                          child: NavChip(
                            label: e.$2,
                            isActive: _pageId == e.$1,
                            onTap: () => _navigate(e.$1),
                          ),
                        ),
                      )
                      .toList(),
                ),
              // NOTE: no manual hamburger here; Scaffold shows a single
              // menu icon automatically when endDrawer is present.
            ],
          ),
        ),
      ),
      endDrawer: isWide
          ? null
          : Drawer(
              child: SafeArea(
                child: ListView(
                  padding: const EdgeInsets.symmetric(vertical: 8),
                  children: [
                    const ListTile(
                      leading: _LogoImage(size: 28),
                      title: Text(
                        'My Lawn Doctor',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w700,
                        ),
                      ),
                    ),
                    const Divider(),
                    ..._pages.map(
                      (e) => ListTile(
                        title: Text(e.$2),
                        trailing: _pageId == e.$1
                            ? const Icon(Icons.check, color: kGreen)
                            : null,
                        onTap: () {
                          Navigator.pop(context);
                          _navigate(e.$1);
                        },
                      ),
                    ),
                  ],
                ),
              ),
            ),
      body: AnimatedSwitcher(
        duration: const Duration(milliseconds: 350),
        switchInCurve: Curves.easeOutCubic,
        switchOutCurve: Curves.easeInCubic,
        child: _body(),
      ),
      backgroundColor: Colors.white,
    );
  }
}

/* ===================== Hidden Admin Gate (Logo) ===================== */

/// Wraps the logo; 5 taps within 3 seconds opens a password dialog.
/// On success, calls [onUnlocked].
class _LogoAdminGate extends StatefulWidget {
  final VoidCallback onUnlocked;
  const _LogoAdminGate({required this.onUnlocked});

  @override
  State<_LogoAdminGate> createState() => _LogoAdminGateState();
}

class _LogoAdminGateState extends State<_LogoAdminGate> {
  static const int _requiredTaps = 5;
  static const Duration _window = Duration(seconds: 3);

  int _tapCount = 0;
  Timer? _resetTimer;

  @override
  void dispose() {
    _resetTimer?.cancel();
    super.dispose();
  }

  void _onTap() async {
    _resetTimer ??= Timer(_window, () {
      _tapCount = 0;
      _resetTimer = null;
    });

    _tapCount++;
    if (_tapCount >= _requiredTaps) {
      _resetTimer?.cancel();
      _resetTimer = null;
      _tapCount = 0;

      final ok = await showDialog<bool>(
        context: context,
        barrierDismissible: true,
        builder: (_) => const _AdminPasswordDialog(),
      );

      if (!mounted) return;
      if (ok == true) widget.onUnlocked();
    }
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: _onTap,
      behavior: HitTestBehavior.opaque,
      child: const _LogoImage(size: 34),
    );
  }
}

/// Small reusable asset logo widget (uses assets/logo.png).
class _LogoImage extends StatelessWidget {
  final double size;
  const _LogoImage({this.size = 32});

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(size * 0.2),
      child: Image.asset(
        'assets/logo.png',
        width: size,
        height: size,
        fit: BoxFit.contain,
        errorBuilder: (_, __, ___) =>
            Icon(Icons.park, size: size, color: kGreen),
      ),
    );
  }
}

/// Password dialog; returns true on success.
class _AdminPasswordDialog extends StatefulWidget {
  const _AdminPasswordDialog();

  @override
  State<_AdminPasswordDialog> createState() => _AdminPasswordDialogState();
}

class _AdminPasswordDialogState extends State<_AdminPasswordDialog> {
  static const String _adminPassword = 'mirabella2303';

  final _controller = TextEditingController();
  String? _error;
  bool _obscure = true;
  bool _loading = false;

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _tryUnlock() async {
    if (_loading) return;
    setState(() => _loading = true);

    await Future<void>.delayed(const Duration(milliseconds: 50)); // tiny yield

    if (_controller.text.trim() == _adminPassword) {
      if (mounted) Navigator.of(context).pop(true);
    } else {
      setState(() {
        _error = 'Incorrect password';
        _loading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Admin Access'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          const Text('Enter admin password to continue.'),
          const SizedBox(height: 12),
          TextField(
            controller: _controller,
            obscureText: _obscure,
            onSubmitted: (_) => _tryUnlock(),
            decoration: InputDecoration(
              labelText: 'Password',
              errorText: _error,
              suffixIcon: IconButton(
                icon: Icon(_obscure ? Icons.visibility : Icons.visibility_off),
                onPressed: () => setState(() => _obscure = !_obscure),
              ),
            ),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: _loading ? null : () => Navigator.pop(context, false),
          child: const Text('Cancel'),
        ),
        FilledButton(
          onPressed: _loading ? null : _tryUnlock,
          style: FilledButton.styleFrom(backgroundColor: kGreen),
          child: _loading
              ? const SizedBox(
                  width: 18,
                  height: 18,
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
              : const Text('Unlock'),
        ),
      ],
    );
  }
}
